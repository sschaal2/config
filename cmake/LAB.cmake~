#############################################################################
# which cmake version do we require?

cmake_minimum_required(VERSION 2.8)

#############################################################################
# set useful variables according to MACHTYPE environment variables


if ($ENV{MACHTYPE} MATCHES "x86_64mac")

  message("Detected MACHTYPE=x86_64mac")
  include_directories(/usr/X11/include /opt/local/include /sw/include /usr/include)
  set(CMAKE_LIBRARY_PATH /sw/lib /usr/X11/lib /opt/local/lib ${CMAKE_LIBRARY_PATH})

  find_package(readline5)

  set(SYSLIBRARIES readline curses)

  exec_program(ls OUTPUT_VARIABLE mist)
  # message(${mist})

else ($ENV{MACHTYPE} MATCHES "x86_64")

  message("Detected MACHTYPE=x86_64")
  include_directories()
  set(CMAKE_LIBRARY_PATH /usr/X11/lib64 /usr/X11/lib ${CMAKE_LIBRARY_PATH})

else ($ENV{MACHTYPE} MATCHES "x86_64xeno")

  message("Detected MACHTYPE=x86_64xeno")
  exec_program($ENV(XENOMAI_ROOT)/bin/xeno-config --skin=native --cflags 
  						  OUTPUT_VARIABLE XENOMAI_C_FLAGS)  
  exec_program($ENV(XENOMAI_ROOT)/bin/xeno-config --skin=native --ldflags 
  						  OUTPUT_VARIABLE XENOMAI_LD_FLAGS)  
  include_directories(${XENOMAI_C_FLAGS})
  set(CMAKE_LIBRARY_PATH /usr/X11/lib64 /usr/X11/lib ${CMAKE_LIBRARY_PATH})
  set(SYSLIBRARIES $(shell $(XENOMAI_ROOT)/bin/xeno-config --skin=native --ldflags) -native -rtdk -analogy -rtdm -readline -curses)

endif()

set(CMAKE_C_FLAGS -Wall)

#############################################################################
# set robot machine names globally
set(ARM_HOST mandy)
set(APOLLO_HOST pechstein)
set(HERMES_HOST hermes)

#############################################################################
# print out all variables that we care about

set(_variableNames CMAKE_C_FLAGS CMAKE_CPP_FLAGS)
foreach (_variableName ${_variableNames})
    message(STATUS "${_variableName}=${${_variableName}}")
endforeach()

#############################################################################
# add custom rules

add_custom_target(clean-all COMMAND 
			    ${CMAKE_COMMAND} -P $ENV{MACHTYPE}/config/clean-all.cmake)
